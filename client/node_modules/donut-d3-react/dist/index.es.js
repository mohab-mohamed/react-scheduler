import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { pie, scaleOrdinal, schemeCategory10, arc } from 'd3';

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = ".donut .arc {\n  cursor: pointer;\n  transition: 1s;\n}\n.donut .arc:hover {\n  opacity: 0.9;\n}\n";
styleInject(css);

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var Donut = function (_Component) {
  inherits(Donut, _Component);

  function Donut(props) {
    classCallCheck(this, Donut);

    var _this = possibleConstructorReturn(this, (Donut.__proto__ || Object.getPrototypeOf(Donut)).call(this, props));

    _this.resize = function () {
      if (_this.donut.current) {
        _this.setState({
          width: _this.donut.current.clientWidth //responsive chart width
        });
      }
    };

    _this.mouseoverArc = function (e, d, total) {
      _this.setState({
        value: d.data.value,
        title: d.data.title,
        percentage: roundPercentage(d.data.value / total) + "%"
      });

      _this.props.onArcMouseOverHandler(e, d);
    };

    _this.mouseoutArc = function (e) {
      _this.setState({ value: "", title: "", percentage: "" });

      _this.props.onArcMouseOutHandler(e);
    };

    _this.renderArc = function (d, i, radius, total) {
      return React.createElement(Arc, { key: i,
        outerRadius: radius,
        innerRadius: radius / _this.props.outerToInnerRadiiRatio,
        d: d,
        total: total,
        mouseover: _this.mouseoverArc,
        mouseout: _this.mouseoutArc,
        onclick: _this.props.onArcClickHandler,
        fill: _this.props.colorScale(i)
      });
    };

    _this.state = {
      width: 500,
      value: "",
      title: "",
      percentage: ""
    };

    _this.donut = React.createRef();
    return _this;
  }

  createClass(Donut, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('resize', this.resize); //add resize listener for responsiveness

      this.resize(); //initial resize
    }
  }, {
    key: 'renderKey',
    value: function renderKey(d, i, total) {
      return React.createElement(
        'g',
        { key: i, transform: "translate(0," + i * this.props.keyRowSeparation + ")" },
        React.createElement('rect', { className: 'key', fill: this.props.colorScale(i), x: '0', y: '0', width: this.props.keyRectSize, height: this.props.keyRectSize }),
        React.createElement(
          'text',
          { transform: "translate(" + this.props.keyTextOffsetX + "," + this.props.keyTextOffsetY + ")", fontSize: this.props.keyFontSize },
          d.data.title,
          ' | ',
          d.data.value,
          ' | ',
          roundPercentage(d.data.value / total) + "%"
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          data = _props.data,
          maxDiameter = _props.maxDiameter,
          showKey = _props.showKey,
          keyRowSeparation = _props.keyRowSeparation;


      var diameter = Math.min(this.state.width, maxDiameter);

      var x = this.state.width / 2;
      var y = diameter / 2;

      var pie$$1 = pie().value(function (d) {
        return d.value;
      });
      var total = data.reduce(function (a, b) {
        return a + b.value;
      }, 0);

      return React.createElement(
        'div',
        { ref: this.donut },
        React.createElement(
          'svg',
          { className: 'donut', width: this.state.width, height: diameter },
          React.createElement(
            'g',
            { transform: 'translate(' + x + ', ' + y + ')' },
            pie$$1(data).map(function (d, i) {
              return _this2.renderArc(d, i, diameter / 2, total);
            }),
            React.createElement(
              'g',
              null,
              React.createElement(
                'text',
                { textAnchor: 'middle', transform: "translate(0," + diameter / 25 + ")", style: { fontSize: diameter / 12 + "px" } },
                this.state.percentage
              ),
              React.createElement(
                'text',
                { textAnchor: 'middle', transform: "translate(0," + -2 * diameter / 25 + ")", style: { fontSize: diameter / 25 + "px" } },
                this.state.title
              ),
              React.createElement(
                'text',
                { textAnchor: 'middle', transform: "translate(0," + 4 * diameter / 25 + ")", style: { fontSize: diameter / 12 + "px" } },
                typeof this.state.value === "string" ? "" : roundNumber(this.state.value)
              )
            )
          )
        ),
        showKey ? React.createElement(
          'svg',
          { width: this.state.width, height: data.length * keyRowSeparation },
          pie$$1(this.props.data).map(function (d, i) {
            return _this2.renderKey(d, i, total);
          })
        ) : null
      );
    }
  }]);
  return Donut;
}(Component);

Donut.propTypes = {
  data: PropTypes.array.isRequired, //data: [ {value: number, title: string}, ... ]

  colorScale: PropTypes.func,
  onArcMouseOverHandler: PropTypes.func,
  onArcMouseOutHandler: PropTypes.func,
  onArcClickHandler: PropTypes.func,
  maxDiameter: PropTypes.number,
  outerToInnerRadiiRatio: PropTypes.number,
  showKey: PropTypes.bool,
  keyTextOffsetX: PropTypes.number,
  keyTextOffsetY: PropTypes.number,
  keyFontSize: PropTypes.number,
  keyRowSeparation: PropTypes.number,
  keyRectSize: PropTypes.number
};
Donut.defaultProps = {
  colorScale: scaleOrdinal(schemeCategory10),
  onArcMouseOverHandler: function onArcMouseOverHandler(e, d) {},
  onArcMouseOutHandler: function onArcMouseOutHandler(e, d) {},
  onArcClickHandler: function onArcClickHandler(e, d) {},
  maxDiameter: 500,
  outerToInnerRadiiRatio: 2,
  showKey: true,
  keyTextOffsetX: 20,
  keyTextOffsetY: 14,
  keyFontSize: 16,
  keyRowSeparation: 20,
  keyRectSize: 16
};

var Arc = function (_Component2) {
  inherits(Arc, _Component2);

  function Arc() {
    classCallCheck(this, Arc);
    return possibleConstructorReturn(this, (Arc.__proto__ || Object.getPrototypeOf(Arc)).apply(this, arguments));
  }

  createClass(Arc, [{
    key: 'render',
    value: function render() {
      var _this4 = this;

      var _props2 = this.props,
          d = _props2.d,
          fill = _props2.fill,
          total = _props2.total,
          innerRadius = _props2.innerRadius,
          outerRadius = _props2.outerRadius;


      var arc$$1 = arc().innerRadius(innerRadius).outerRadius(outerRadius);

      return React.createElement(
        'path',
        { className: 'arc', d: arc$$1(d), fill: fill, onClick: function onClick(e) {
            return _this4.props.onclick(e, d);
          }, onMouseOver: function onMouseOver(e) {
            return _this4.props.mouseover(e, d, _this4.props.total);
          }, onMouseOut: function onMouseOut(e) {
            return _this4.props.mouseout(e);
          } },
        React.createElement(
          'title',
          null,
          d.data.title,
          ' - ',
          d.value,
          ' - ',
          roundPercentage(d.value / total),
          '%'
        )
      );
    }
  }]);
  return Arc;
}(Component);

function roundNumber(number) {
  return Math.round(100 * number) / 100;
}

function roundPercentage(number) {
  return Math.round(10000 * number) / 100;
}

export default Donut;
//# sourceMappingURL=index.es.js.map
